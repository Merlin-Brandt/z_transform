E0
%: {::m5_load(m5/init.m5.0.2)}
E1
%: {::m5_load(m5/metatime.m5)}
//%/: {::m5_load(m5/experimental//c.m5)}
E2

%::shader_rest {}
%: shader_rest {::shader_rest__remove_last_quote}
%: shader_rest {:nl:newline:r:shader_rest} -> {\n\:nl'`:r}
%: shader_rest {::shader_not::anychar::shader_rest}

%::shader_not {::shader_not_newline::shader_not_quote::shader_not_comment}
%::shader_not_newline (not) {::newline}
%::shader_not_quote (not) {"}
%::shader_not_comment (not) {*/}

%: shader_rest__remove_last_quote {::eof} -> {}

%: shader(::nwh:r:shader_rest) -> {:r}
D1

%: {::define_whitespace_handler('replace with ::nwh`)}    //'

%: vertex_place {:tuple:alnum_s} -> {:tuple.x, :tuple.y, :typle.z}
%: vertex_place {place ( :x:float , :y:float , :z:float )} -> {:x, :y, :z}

%: vertex_color {:tuple:alnum_s} -> {:tuple.r, :tuple.g, :typle.b}
%: vertex_color {color ( :x:float , :y:float , :z:float )} -> {:x, :y, :z}

%: vertex_texcoords {:tuple:alnum_s} -> {:tuple.u, :tuple.v}
%: vertex_texcoords {texcoords ( :x:float , :y:float )} -> {:x, :y}

%: vertex_data {
    :xyz:vertex_place, ::nwh
    :rgb:vertex_color , ::nwh
    :uv:vertex_texcoords
} -> {
    :xyz, :rgb, :uv
}

%: meta! {
    type vertex_data_list = list of { ::vertex_data }.
}

%: maybe_quote {}
%: maybe_quote {" ;}

%: opengl_meta { { ::nwh
    :r:meta_opengl_cmds ::nwh
} :mq:maybe_quote } -> {
    :mq :r
}

D2

%: meta_opengl_cmds {}
%: meta_opengl_cmds {::meta_opengl_cmd ::meta_opengl_cmds}

%: meta_opengl_cmd {
    var' ` :name:alnum_s = object ( :vertex_data:vertex_data_list )
} -> {
    gobject_t :name;

    // Create a Vertex Buffer Object and copy the vertex data to it
    glGenBuffers(1, &:name.vbo);

    // format: XYZRGBUV
    {
        GLfloat vertices[] = {:vertex_data};

        glBindBuffer(GL_ARRAY_BUFFER, :name.vbo);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
    }

    glGenVertexArrays(1, &:name.vao);
    glBindVertexArray(:name.vao);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    // color attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glEnableVertexAttribArray(1);
    // texture coord attribute
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glEnableVertexAttribArray(2);
}

D3

//%/: {::remove_c_comments}
//%/: {::translation_unit}